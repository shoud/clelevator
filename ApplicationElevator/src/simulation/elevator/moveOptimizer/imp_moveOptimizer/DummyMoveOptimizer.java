/**
 * LogicalView/simulation/elevator/moveOptimizer/imp_moveOptimizer/MoveOptimizer.java
 *
 * File generated from the Ascenseur::LogicalView::simulation.elevator::moveOptimizer::imp_moveOptimizer::MoveOptimizer uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 24/11/14 15:55:30 (24 novembre 2014) $
 */
package simulation.elevator.moveOptimizer.imp_moveOptimizer;

// Start of user code to add imports for MoveOptimizer
 
import java.util.ArrayList;

import simulation.elevator.commonType.Direction;
import simulation.elevator.commonType.ElevatorState;
import simulation.elevator.elevator.int_elevator.IElevator;
import simulation.elevator.elevator_UI.imp_elevator_UI.ElevatorUI;
import simulation.elevator.moveOptimizer.int_moveOptimizer.IMoveOptimizer;

// End of user code

/**
 * Description of the class MoveOptimizer..
 *
 */

public class DummyMoveOptimizer implements IMoveOptimizer {

	IElevator elevator;
	Direction direction;
	ArrayList<DummyRequetCall> listCallLevel;
	ArrayList<Integer> listLevel;
	
	public DummyMoveOptimizer(IElevator elevator) {
		listCallLevel = new ArrayList<DummyRequetCall>();
		listLevel = new ArrayList<Integer>();
		this.elevator = elevator;
		this.direction = null;
	}
	
	@Override
	public void registerCallLevel(int level, Direction direction, int destination){
		listCallLevel.add(new DummyRequetCall(level, direction,destination));
	}

	@Override
	public void updatePosition(){
		//elevatorInfo = new ElevatorInfoFactory().createElevatorInfo(elevatorCommand);
		//elevatorInfo.setDirection(Direction.DOWN);
		//elevatorInfo.setElevatorState(ElevatorState.MOVING);
	}

	@Override
	public ElevatorUI getElevatorUI() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setElevatorUI(ElevatorUI elevatorUI) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void trigger(long t) {
		
		if(!listLevel.isEmpty())
		{
			if(elevator.getCurrentFloor() == listLevel.get(0))
			{
				System.out.println("L'utilisateur est arrivé à destination à l'étage : " + listLevel.get(0));
				listLevel.remove(0);
			}
			else
			{
				if(elevator.getCurrentFloor() - listLevel.get(0) > 0)
					this.direction = Direction.DOWN;
				else
					this.direction = Direction.UP;
				elevator.setDirection(direction);
				elevator.setElevatorState(ElevatorState.MOVING);	
			}
		}
		if(!listCallLevel.isEmpty() && listLevel.isEmpty())
		{
			if((elevator.getCurrentFloor() == listCallLevel.get(0).getLevel()))
			{
				elevator.setElevatorState(ElevatorState.SLEEPING);
				System.out.println("L'utilisateur monte dans l'ascenseur à l'étage : " + elevator.getCurrentFloor());
				listLevel.add((listCallLevel.get(0).getDestination()));
				listCallLevel.remove(0);
				
			}
			else
			{
				if(elevator.getCurrentFloor() - listCallLevel.get(0).getLevel() > 0)
					this.direction = Direction.DOWN;
				else
					this.direction = Direction.UP;
				elevator.setDirection(direction);
				elevator.setElevatorState(ElevatorState.MOVING);
			}
		}
	}
}