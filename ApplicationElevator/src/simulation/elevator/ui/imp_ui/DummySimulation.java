/**
 * LogicalView/simulation/elevator/ui/imp_ui/Simulation.java
 *
 * File generated from the Ascenseur::LogicalView::simulation.elevator::ui::imp_ui::Simulation uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 24/11/14 15:55:31 (24 novembre 2014) $
 */
package simulation.elevator.ui.imp_ui;

import simulation.elevator.Sequencer.imp_sequencer.SequencerException;
import simulation.elevator.Sequencer.int_sequencer.SequencerFactory;
import simulation.elevator.elevator.int_elevator.ElevatorFactory;
import simulation.elevator.elevator.int_elevator.IElevator;
import simulation.elevator.moveOptimizer.int_moveOptimizer.IMoveOptimizer;
import simulation.elevator.moveOptimizer.int_moveOptimizer.MoveOptimizerFactory;
import simulation.elevator.resultAnalyser.int_resutlAnalyser.ResultAnalyserFactory;
import simulation.elevator.traffic.int_traffic.TrafficFactory;
import simulation.elevator.traffic.int_traffic.ITraffic;
import simulation.elevator.Sequencer.int_sequencer.ISequencer;
import simulation.elevator.resultAnalyser.int_resutlAnalyser.IResultAnalyser;
import simulation.elevator.elevator_UI.int_elevator_UI.ElevatorUIFactory;
import simulation.elevator.elevator_UI.int_elevator_UI.IElevatorUI;


// Start of user code to add imports for Simulation

/**
 * Description of the class Simulation.
 */

public class DummySimulation {

	IResultAnalyser resultAnalyser;
	ITraffic traffic;
	IElevatorUI elevatorUI;
	ISequencer sequencer;
	IElevator elevator;
	IMoveOptimizer moveOptimizer;
	
	/**
	 * Constructeur de classe simulation
	 */
	public DummySimulation()
	{
		//Resultanalyser
		resultAnalyser = ResultAnalyserFactory.createResultAnalyser();
		//Elevator
		elevator = ElevatorFactory.createElevator();
		//MoveOptimizer
		moveOptimizer = MoveOptimizerFactory.createMoveOptimizer(elevator);
		//UI_Elevator
		elevatorUI = ElevatorUIFactory.createElevatorUI(moveOptimizer);		
		//Traffic
		traffic = TrafficFactory.createTraffic(elevatorUI);		
		//Sequencer
		sequencer = SequencerFactory.createSequencer(0, 10000, 1, 1);
		try {
			sequencer.addProcess(traffic);
			sequencer.addProcess(moveOptimizer);
			sequencer.addProcess(elevator);
		} catch (SequencerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * Permet de crÃ©er le trafic.
	 */
	public void createTraffic()
	{
		//Permet de créer un traffic, mais pour les tests en dur dans le constructeur de Traffic.
		
	}
	/**
	 * Permet de créer un séquenceur.
	 */
	public void startSequencer()
	{
		System.out.println("Lancement du séquenceur");
		
		sequencer.start();
	}
	
	/**
	*/
	public static void main(String [ ] args)
	{
		//UI
		DummySimulation simu = new DummySimulation();
		simu.createTraffic();
		simu.startSequencer();
		System.out.println("La simulation est finit");
	}

	/**
	 * @uml.property  name="iResultAnalyser"
	 * @uml.associationEnd  inverse="dummySimulation1:simulation.elevator.resultAnalyser.int_resutlAnalyser.IResultAnalyser"
	 */
	private IResultAnalyser iResultAnalyser;

	/**
	 * Getter of the property <tt>iResultAnalyser</tt>
	 * @return  Returns the iResultAnalyser.
	 * @uml.property  name="iResultAnalyser"
	 */
	public IResultAnalyser getIResultAnalyser() {
		return iResultAnalyser;
	}
	/**
	 * Setter of the property <tt>iResultAnalyser</tt>
	 * @param iResultAnalyser  The iResultAnalyser to set.
	 * @uml.property  name="iResultAnalyser"
	 */
	public void setIResultAnalyser(IResultAnalyser iResultAnalyser) {
		this.iResultAnalyser = iResultAnalyser;
	}
}